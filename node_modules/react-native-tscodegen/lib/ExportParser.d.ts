import * as ts from 'typescript';
export interface ExportNativeModuleInfo {
    program: ts.Program;
    sourceFile: ts.SourceFile;
    typeNode: ts.TypeNode;
    name: string;
}
export interface ExportComponentInfo {
    program: ts.Program;
    sourceFile: ts.SourceFile;
    typeNode: ts.TypeNode;
    name: string;
    options: {
        [key: string]: boolean | string | string[];
    };
}
export interface ExportCommandInfo {
    program: ts.Program;
    sourceFile: ts.SourceFile;
    typeNode: ts.TypeNode;
    supportedCommands: string[];
}
declare type ExportInfo = [ts.TypeNode, ts.Expression, ts.Expression];
export declare function resolveType(typeNode: ts.TypeNode, sourceFile: ts.SourceFile): ts.TypeNode;
export declare function getMembersFromType(typeNode: ts.TypeNode, sourceFile: ts.SourceFile): readonly ts.TypeElement[] | undefined;
export declare function tryParseExportedCallExpression(callExpression: ts.Expression, functionName: string): ExportInfo | undefined;
export declare function tryParseExport(program: ts.Program, sourceFile: ts.SourceFile, node: ts.Node, functionName: string): ExportInfo | undefined;
export declare function tryParseExportNativeModule(program: ts.Program, sourceFile: ts.SourceFile, node: ts.Node): ExportNativeModuleInfo | undefined;
export declare function tryParseExportComponent(program: ts.Program, sourceFile: ts.SourceFile, node: ts.Node): ExportComponentInfo | undefined;
export declare function tryParseExportCommand(program: ts.Program, sourceFile: ts.SourceFile, node: ts.Node): ExportCommandInfo | undefined;
export {};
