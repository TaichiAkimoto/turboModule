export declare type PlatformType = 'iOS' | 'android';
export declare type SchemaType = Readonly<{
    modules: Readonly<{
        [hasteModuleName: string]: ComponentSchema | NativeModuleSchema;
    }>;
}>;
export declare type DoubleTypeAnnotation = Readonly<{
    type: 'DoubleTypeAnnotation';
}>;
export declare type FloatTypeAnnotation = Readonly<{
    type: 'FloatTypeAnnotation';
}>;
export declare type BooleanTypeAnnotation = Readonly<{
    type: 'BooleanTypeAnnotation';
}>;
export declare type Int32TypeAnnotation = Readonly<{
    type: 'Int32TypeAnnotation';
}>;
export declare type StringTypeAnnotation = Readonly<{
    type: 'StringTypeAnnotation';
}>;
export declare type StringEnumTypeAnnotation = Readonly<{
    type: 'StringEnumTypeAnnotation';
    options: ReadonlyArray<string>;
}>;
export declare type VoidTypeAnnotation = Readonly<{
    type: 'VoidTypeAnnotation';
}>;
export declare type ObjectTypeAnnotation<T> = Readonly<{
    type: 'ObjectTypeAnnotation';
    properties: ReadonlyArray<NamedShape<T>>;
}>;
export declare type FunctionTypeAnnotation<P, R> = Readonly<{
    type: 'FunctionTypeAnnotation';
    params: ReadonlyArray<NamedShape<P>>;
    returnTypeAnnotation: R;
}>;
export declare type NamedShape<T> = Readonly<{
    name: string;
    optional: boolean;
    typeAnnotation: T;
}>;
export declare type ComponentSchema = Readonly<{
    type: 'Component';
    components: Readonly<{
        [componentName: string]: ComponentShape;
    }>;
}>;
export declare type ComponentShape = Readonly<OptionsShape & {
    extendsProps: ReadonlyArray<ExtendsPropsShape>;
    events: ReadonlyArray<EventTypeShape>;
    props: ReadonlyArray<NamedShape<PropTypeAnnotation>>;
    commands: ReadonlyArray<NamedShape<CommandTypeAnnotation>>;
}>;
export declare type OptionsShape = Readonly<{
    interfaceOnly?: boolean;
    paperComponentName?: string;
    excludedPlatforms?: ReadonlyArray<PlatformType>;
    paperComponentNameDeprecated?: string;
}>;
export declare type ExtendsPropsShape = Readonly<{
    type: 'ReactNativeBuiltInType';
    knownTypeName: 'ReactNativeCoreViewProps';
}>;
export declare type EventTypeShape = Readonly<{
    name: string;
    bubblingType: 'direct' | 'bubble';
    optional: boolean;
    paperTopLevelNameDeprecated?: string;
    typeAnnotation: Readonly<{
        type: 'EventTypeAnnotation';
        argument?: ObjectTypeAnnotation<EventTypeAnnotation>;
    }>;
}>;
export interface ObjectTypeAnnotation_EventTypeAnnotation extends ObjectTypeAnnotation<EventTypeAnnotation> {
}
export declare type EventTypeAnnotation = BooleanTypeAnnotation | StringTypeAnnotation | DoubleTypeAnnotation | FloatTypeAnnotation | Int32TypeAnnotation | StringEnumTypeAnnotation | ObjectTypeAnnotation_EventTypeAnnotation;
export interface ObjectTypeAnnotation_PropTypeAnnotation extends ObjectTypeAnnotation<PropTypeAnnotation> {
}
export declare type PropTypeAnnotation = Readonly<{
    type: 'BooleanTypeAnnotation';
    default: boolean | null;
}> | Readonly<{
    type: 'StringTypeAnnotation';
    default: string | null;
}> | Readonly<{
    type: 'DoubleTypeAnnotation';
    default: number;
}> | Readonly<{
    type: 'FloatTypeAnnotation';
    default: number | null;
}> | Readonly<{
    type: 'Int32TypeAnnotation';
    default: number;
}> | Readonly<{
    type: 'StringEnumTypeAnnotation';
    default: string;
    options: ReadonlyArray<string>;
}> | Readonly<{
    type: 'Int32EnumTypeAnnotation';
    default: number;
    options: ReadonlyArray<number>;
}> | ReservedPropTypeAnnotation | ObjectTypeAnnotation_PropTypeAnnotation | Readonly<{
    type: 'ArrayTypeAnnotation';
    elementType: BooleanTypeAnnotation | StringTypeAnnotation | DoubleTypeAnnotation | FloatTypeAnnotation | Int32TypeAnnotation | Readonly<{
        type: 'StringEnumTypeAnnotation';
        default: string;
        options: ReadonlyArray<string>;
    }> | ObjectTypeAnnotation<PropTypeAnnotation> | ReservedPropTypeAnnotation | Readonly<{
        type: 'ArrayTypeAnnotation';
        elementType: ObjectTypeAnnotation<PropTypeAnnotation>;
    }>;
}>;
export declare type ReservedPropTypeAnnotation = Readonly<{
    type: 'ReservedPropTypeAnnotation';
    name: 'ColorPrimitive' | 'ImageSourcePrimitive' | 'PointPrimitive' | 'EdgeInsetsPrimitive';
}>;
export declare type CommandTypeAnnotation = FunctionTypeAnnotation<CommandParamTypeAnnotation, VoidTypeAnnotation>;
export declare type CommandParamTypeAnnotation = ReservedTypeAnnotation | BooleanTypeAnnotation | Int32TypeAnnotation | DoubleTypeAnnotation | FloatTypeAnnotation | StringTypeAnnotation;
export declare type ReservedTypeAnnotation = Readonly<{
    type: 'ReservedTypeAnnotation';
    name: 'RootTag';
}>;
export declare type Nullable<T extends NativeModuleTypeAnnotation> = NullableTypeAnnotation<T> | T;
export declare type NullableTypeAnnotation<T extends NativeModuleTypeAnnotation> = Readonly<{
    type: 'NullableTypeAnnotation';
    typeAnnotation: T;
}>;
export declare type NativeModuleSchema = Readonly<{
    type: 'NativeModule';
    aliases: NativeModuleAliasMap;
    spec: NativeModuleSpec;
    moduleNames: ReadonlyArray<string>;
    excludedPlatforms?: ReadonlyArray<PlatformType>;
}>;
export declare type NativeModuleSpec = Readonly<{
    properties: ReadonlyArray<NativeModulePropertyShape>;
}>;
export declare type NativeModulePropertyShape = NamedShape<Nullable<NativeModuleFunctionTypeAnnotation>>;
export declare type NativeModuleAliasMap = Readonly<{
    [aliasName: string]: NativeModuleObjectTypeAnnotation;
}>;
export interface NativeModuleFunctionTypeAnnotation extends FunctionTypeAnnotation<Nullable<NativeModuleParamTypeAnnotation>, Nullable<NativeModuleReturnTypeAnnotation>> {
}
export interface NativeModuleObjectTypeAnnotation extends ObjectTypeAnnotation<Nullable<NativeModuleBaseTypeAnnotation>> {
}
export declare type NativeModuleArrayTypeAnnotation<T extends Nullable<NativeModuleBaseTypeAnnotation>> = Readonly<{
    type: 'ArrayTypeAnnotation';
    elementType?: T;
}>;
export declare type NativeModuleStringTypeAnnotation = Readonly<{
    type: 'StringTypeAnnotation';
}>;
export declare type NativeModuleNumberTypeAnnotation = Readonly<{
    type: 'NumberTypeAnnotation';
}>;
export declare type NativeModuleInt32TypeAnnotation = Readonly<{
    type: 'Int32TypeAnnotation';
}>;
export declare type NativeModuleDoubleTypeAnnotation = Readonly<{
    type: 'DoubleTypeAnnotation';
}>;
export declare type NativeModuleFloatTypeAnnotation = Readonly<{
    type: 'FloatTypeAnnotation';
}>;
export declare type NativeModuleBooleanTypeAnnotation = Readonly<{
    type: 'BooleanTypeAnnotation';
}>;
export declare type NativeModuleGenericObjectTypeAnnotation = Readonly<{
    type: 'GenericObjectTypeAnnotation';
}>;
export declare type NativeModuleTypeAliasTypeAnnotation = Readonly<{
    type: 'TypeAliasTypeAnnotation';
    name: string;
}>;
export declare type NativeModulePromiseTypeAnnotation = Readonly<{
    type: 'PromiseTypeAnnotation';
}>;
export interface NativeModuleArrayTypeAnnotation_Nullable_NativeModuleBaseTypeAnnotation extends NativeModuleArrayTypeAnnotation<Nullable<NativeModuleBaseTypeAnnotation>> {
}
export declare type NativeModuleBaseTypeAnnotation = NativeModuleStringTypeAnnotation | NativeModuleNumberTypeAnnotation | NativeModuleInt32TypeAnnotation | NativeModuleDoubleTypeAnnotation | NativeModuleFloatTypeAnnotation | NativeModuleBooleanTypeAnnotation | NativeModuleGenericObjectTypeAnnotation | ReservedTypeAnnotation | NativeModuleTypeAliasTypeAnnotation | NativeModuleArrayTypeAnnotation_Nullable_NativeModuleBaseTypeAnnotation | NativeModuleObjectTypeAnnotation;
export declare type NativeModuleParamTypeAnnotation = NativeModuleBaseTypeAnnotation | NativeModuleParamOnlyTypeAnnotation;
export declare type NativeModuleReturnTypeAnnotation = NativeModuleBaseTypeAnnotation | NativeModuleReturnOnlyTypeAnnotation;
export declare type NativeModuleTypeAnnotation = NativeModuleBaseTypeAnnotation | NativeModuleParamOnlyTypeAnnotation | NativeModuleReturnOnlyTypeAnnotation;
export declare type NativeModuleParamOnlyTypeAnnotation = NativeModuleFunctionTypeAnnotation;
export declare type NativeModuleReturnOnlyTypeAnnotation = NativeModulePromiseTypeAnnotation | VoidTypeAnnotation;
