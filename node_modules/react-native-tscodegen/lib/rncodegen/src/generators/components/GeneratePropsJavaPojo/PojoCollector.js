/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *       strict
 * @format
 */

'use strict';

             
                             
             
                       
                        
                       
                       
                      
                      
                     
                                

const {capitalize} = require('../../Utils');

                    
               
                    
                                           
  

                                                          

                                       
                                      
               
  

                                
               
                                    
                              
      
               
                                   
                             
      
               
                                   
                      
      
               
                                  
                             
      
               
                                  
                      
      
               
                                       
                      
                                      
      
               
                                      
                      
                                      
      
                              
                           
               
                                  
                  
                               
                              
                              
                             
                             
                     
                                             
                            
                                            
            
                                 
                                    
                     
                                        
                                                 
             
       

class PojoCollector {
  _pojos                    = new Map();
  process(
    namespace        ,
    pojoName        ,
    typeAnnotation                    ,
  )                     {
    switch (typeAnnotation.type) {
      case 'ObjectTypeAnnotation': {
        this._insertPojo(namespace, pojoName, typeAnnotation);
        return {
          type: 'PojoTypeAliasTypeAnnotation',
          name: pojoName,
        };
      }
      case 'ArrayTypeAnnotation': {
        const arrayTypeAnnotation = typeAnnotation;
        // TODO: Flow assumes elementType can be any. Fix this.
        const elementType                
                                     
                        
          = arrayTypeAnnotation.elementType;

        const pojoElementType = (() => {
          switch (elementType.type) {
            case 'ObjectTypeAnnotation': {
              this._insertPojo(namespace, `${pojoName}Element`, elementType);
              return {
                type: 'PojoTypeAliasTypeAnnotation',
                name: `${pojoName}Element`,
              };
            }
            case 'ArrayTypeAnnotation': {
              const {elementType: objectTypeAnnotation} = elementType;
              this._insertPojo(
                namespace,
                `${pojoName}ElementElement`,
                objectTypeAnnotation,
              );
              return {
                type: 'ArrayTypeAnnotation',
                elementType: {
                  type: 'PojoTypeAliasTypeAnnotation',
                  name: `${pojoName}ElementElement`,
                },
              };
            }
            default: {
              return elementType;
            }
          }
        })();

        return {
          type: 'ArrayTypeAnnotation',
          elementType: pojoElementType,
        };
      }
      default:
        return typeAnnotation;
    }
  }

  _insertPojo(
    namespace        ,
    pojoName        ,
    objectTypeAnnotation                                          ,
  ) {
    const properties = objectTypeAnnotation.properties.map(property => {
      const propertyPojoName = pojoName + capitalize(property.name);

      return {
        ...property,
        typeAnnotation: this.process(
          namespace,
          propertyPojoName,
          property.typeAnnotation,
        ),
      };
    });

    this._pojos.set(pojoName, {
      name: pojoName,
      namespace,
      properties,
    });
  }

  getAllPojos()                       {
    return [...this._pojos.values()];
  }
}

module.exports = PojoCollector;
