"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var index_1 = require("./index");
try {
    if (process.argv.length !== 3) {
        throw new Error("Incorrect arguments:" + JSON.stringify(process.argv) + "\nUsage: react-native-tscodegen <INPUT-JSON-PATH>");
    }
    if (!fs_1.existsSync(process.argv[2])) {
        throw new Error("Configuration file not exist: " + process.argv[2] + ".");
    }
    var allGenerators = [
        'descriptors',
        'events',
        'props',
        'tests',
        'shadow-nodes',
        'modulesAndroid',
        'modulesCxx',
        'modulesIOS'
    ];
    var config = JSON.parse(fs_1.readFileSync(process.argv[2], { encoding: 'utf-8' }));
    if (typeof config.libraryName !== 'string') {
        throw new Error('Property "libraryName" does not exist or is not a string.');
    }
    if (typeof config.outputDirectory !== 'string') {
        throw new Error('Property "outputDirectory" does not exist or is not a string.');
    }
    if (typeof config.moduleSpecName !== 'string') {
        throw new Error('Property "moduleSpecName" does not exist or is not a string.');
    }
    if (config.generators === undefined) {
        config.generators = allGenerators;
    }
    else if (!(config.generators instanceof Array)) {
        throw new Error('Property "generators" does not exist or is not a string array.');
    }
    else {
        for (var _i = 0, _a = config.generators; _i < _a.length; _i++) {
            var value = _a[_i];
            if (typeof value !== 'string') {
                throw new Error('Property "generators" does not exist or is not a string array.');
            }
            if (!allGenerators.includes(value)) {
                throw new Error("Value " + value + " found in property \"generators\" is not one of " + JSON.stringify(allGenerators) + ".");
            }
        }
    }
    if (typeof config.inputFile !== 'string') {
        throw new Error('Property "inputFile" does not exist or is not a string.');
    }
    else if (!fs_1.existsSync(config.inputFile)) {
        throw new Error("Input file not exist: " + config.inputFile + ".");
    }
    if (!fs_1.existsSync(config.outputDirectory)) {
        fs_1.mkdirSync(config.outputDirectory, { recursive: true });
    }
    var schema = index_1.typeScriptToCodeSchema(config.inputFile, config.libraryName);
    index_1.generator.generate({
        libraryName: config.libraryName,
        schema: schema,
        outputDirectory: config.outputDirectory,
        moduleSpecName: config.moduleSpecName
    }, {
        generators: config.generators
    });
}
catch (err) {
    if (err instanceof Error) {
        console.error(err.message);
        process.exitCode = 1;
    }
    else {
        throw err;
    }
}
//# sourceMappingURL=cli.js.map